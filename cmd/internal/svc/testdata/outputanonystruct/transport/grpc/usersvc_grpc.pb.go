// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: transport/grpc/usersvc.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsersvcServiceClient is the client API for UsersvcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersvcServiceClient interface {
	// You can define your service methods as your need. Below is an example.
	PageUsersRpc(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*Page, error)
}

type usersvcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersvcServiceClient(cc grpc.ClientConnInterface) UsersvcServiceClient {
	return &usersvcServiceClient{cc}
}

func (c *usersvcServiceClient) PageUsersRpc(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, "/usersvc.UsersvcService/PageUsersRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersvcServiceServer is the server API for UsersvcService service.
// All implementations must embed UnimplementedUsersvcServiceServer
// for forward compatibility
type UsersvcServiceServer interface {
	// You can define your service methods as your need. Below is an example.
	PageUsersRpc(context.Context, *PageQuery) (*Page, error)
	mustEmbedUnimplementedUsersvcServiceServer()
}

// UnimplementedUsersvcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUsersvcServiceServer struct {
}

func (UnimplementedUsersvcServiceServer) PageUsersRpc(context.Context, *PageQuery) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageUsersRpc not implemented")
}
func (UnimplementedUsersvcServiceServer) mustEmbedUnimplementedUsersvcServiceServer() {}

// UnsafeUsersvcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersvcServiceServer will
// result in compilation errors.
type UnsafeUsersvcServiceServer interface {
	mustEmbedUnimplementedUsersvcServiceServer()
}

func RegisterUsersvcServiceServer(s grpc.ServiceRegistrar, srv UsersvcServiceServer) {
	s.RegisterService(&UsersvcService_ServiceDesc, srv)
}

func _UsersvcService_PageUsersRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersvcServiceServer).PageUsersRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usersvc.UsersvcService/PageUsersRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersvcServiceServer).PageUsersRpc(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersvcService_ServiceDesc is the grpc.ServiceDesc for UsersvcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersvcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usersvc.UsersvcService",
	HandlerType: (*UsersvcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PageUsersRpc",
			Handler:    _UsersvcService_PageUsersRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport/grpc/usersvc.proto",
}
